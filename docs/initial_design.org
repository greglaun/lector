The basic design is there is a database of local copies of Wikipedia
articles (anything saved in the Reading List), including a cache of
the HTML content.

There is a library that chops articles into paragraphs, a library for
interfacing with the TTS system, and a database layer.

In the future, there will be a recommendation system.

* Current Decisions

** Choice of Database? Compositional caches [Priority High]

DECISION: 
For web-based content, such as articles, we will have a series of caches that compose, and which as a
last resort hit the production Wikipedia servers.

As a first implementation, we can use OkHttp's built-in cache, which
caches the response to disk. We may need to build another layer in front
of this, but we should postpone that decision.

For the reading list, we just need a simple storage that can save data
objects. Room should be sufficient for this. We need to store an object
consisting of 

{
articleId : Long,
articleName : String,
articleUrl : String,
articleMetadata : ArticleMetadata
}

where ArticleMetadata will be a class that contains information about
things like topics and related articles.

** Choice of concurrency framework

DECISION: Since this is a greenfield project, we'll take some risk and use the category-theory-inspired arrow-kt library, which builds some functionality on top of Kotlin's coroutines. This alleviates us from depending on RxJava.

** Strategy for chopping articles [Priotiy High] (todo: sehailey)

We have considered (roughly Feb 2017 - June 2017): 

- Chopping articles into paragraphs and feeding in one paragraph at a
  time, and
- Pre-creating MP3s for easy fastforward-rewind, and resume

Obviously, pre-creating MP3s uses a great deal more space, requires
heavy use of compute resources.

DECISION:


** Auth / Login / User account Decisions [Priority Low]

** Recommendation strategy [Priority Low]

We have considered (roughly Feb 2017 - June 2017): 

1. Using Wikipedia's built-in recommended article feature (as in their
   mobile app). [Question: Do we have access to this?]
2. Use article similarity (e.g. Cosine similarity), and recommend
   similar articles
3. Combine similarity with additional structure, (e.g. topic models)
4. Using the link structure (e.g. BFS + topic models + similarity) to
   recommend articles.

DECISION:
